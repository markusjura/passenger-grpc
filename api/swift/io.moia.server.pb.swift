/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: passenger.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated server code.
internal enum Io_Moia_PassengerServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Io_Moia_PassengerProvider {
  func booktrip(request : Io_Moia_BookingRequest, session : Io_Moia_PassengerBookTripSession) throws -> Io_Moia_BookingResponse
  func trackvehicle(request : Io_Moia_LocationRequest, session : Io_Moia_PassengerTrackVehicleSession) throws
  func echo(session : Io_Moia_PassengerEchoSession) throws
}

/// Common properties available in each service session.
internal class Io_Moia_PassengerSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// BookTrip (Unary)
internal class Io_Moia_PassengerBookTripSession : Io_Moia_PassengerSession {
  private var provider : Io_Moia_PassengerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Io_Moia_PassengerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Io_Moia_BookingRequest(serializedData:requestData)
        let replyMessage = try self.provider.booktrip(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// TrackVehicle (Server Streaming)
internal class Io_Moia_PassengerTrackVehicleSession : Io_Moia_PassengerSession {
  private var provider : Io_Moia_PassengerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Io_Moia_PassengerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Send a message. Nonblocking.
  internal func send(_ response: Io_Moia_Location) throws {
    try handler.sendResponse(message:response.serializedData()) {}
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        do {
          let requestMessage = try Io_Moia_LocationRequest(serializedData:requestData)
          // to keep providers from blocking the server thread,
          // we dispatch them to another queue.
          queue.async {
            do {
              try self.provider.trackvehicle(request:requestMessage, session: self)
              try self.handler.sendStatus(statusCode:self.statusCode,
                                          statusMessage:self.statusMessage,
                                          trailingMetadata:self.trailingMetadata,
                                          completion:{})
            } catch (let error) {
              print("error: \(error)")
            }
          }
        } catch (let error) {
          print("error: \(error)")
        }
      }
    }
  }
}

// Echo (Bidirectional Streaming)
internal class Io_Moia_PassengerEchoSession : Io_Moia_PassengerSession {
  private var provider : Io_Moia_PassengerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Io_Moia_PassengerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Io_Moia_Ping {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Io_Moia_Ping?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        do {
          requestMessage = try Io_Moia_Ping(serializedData:requestData)
        } catch (let error) {
          print("error \(error)")
        }
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let requestMessage = requestMessage {
      return requestMessage
    } else {
      throw Io_Moia_PassengerServerError.endOfStream
    }
  }

  /// Send a message. Nonblocking.
  internal func send(_ response: Io_Moia_Pong) throws {
    try handler.sendResponse(message:response.serializedData()) {}
  }

  /// Close a connection. Blocks until the connection is closed.
  internal func close() throws {
    let sem = DispatchSemaphore(value: 0)
    try self.handler.sendStatus(statusCode:self.statusCode,
                                statusMessage:self.statusMessage,
                                trailingMetadata:self.trailingMetadata) {
                                  sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.echo(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}


/// Main server for generated service
internal class Io_Moia_PassengerServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Io_Moia_PassengerProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Io_Moia_PassengerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Io_Moia_PassengerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/io.moia.Passenger/BookTrip":
          try Io_Moia_PassengerBookTripSession(handler:handler, provider:provider).run(queue:queue)
        case "/io.moia.Passenger/TrackVehicle":
          try Io_Moia_PassengerTrackVehicleSession(handler:handler, provider:provider).run(queue:queue)
        case "/io.moia.Passenger/Echo":
          try Io_Moia_PassengerEchoSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}
